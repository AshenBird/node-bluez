import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 */

/**
 * org.bluez.Adapter1
 */
export class OrgBluezAdapter1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.Adapter1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('org.bluez.Adapter1');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface: string, changed: any, invalidated: any) => {
            if (iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    public getProperties(): Promise<{ [name: string]: DBus.Variant }> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Address', signature: 's', access: ACCESS_READ })
    public Address(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Address');
    }

    //@property({ name: 'AddressType', signature: 's', access: ACCESS_READ })
    public AddressType(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'AddressType');
    }

    //@property({ name: 'Name', signature: 's', access: ACCESS_READ })
    public Name(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Name');
    }

    //@property({ name: 'Alias', signature: 's', access: ACCESS_READWRITE })
    public Alias(): Promise<string>;
    public Alias(value: string): Promise<void>;
    public Alias(value?: string): Promise<any> {
        if (value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Alias', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Alias');
        }
    }

    //@property({ name: 'Class', signature: 'u', access: ACCESS_READ })
    public Class(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Class');
    }

    //@property({ name: 'Powered', signature: 'b', access: ACCESS_READWRITE })
    public Powered(): Promise<boolean>;
    public Powered(value: boolean): Promise<void>;
    public Powered(value?: boolean): Promise<any> {
        if (value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Powered', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Powered');
        }
    }

    //@property({ name: 'Discoverable', signature: 'b', access: ACCESS_READWRITE })
    public Discoverable(): Promise<boolean>;
    public Discoverable(value: boolean): Promise<void>;
    public Discoverable(value?: boolean): Promise<any> {
        if (value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Discoverable', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Discoverable');
        }
    }

    //@property({ name: 'DiscoverableTimeout', signature: 'u', access: ACCESS_READWRITE })
    public DiscoverableTimeout(): Promise<number>;
    public DiscoverableTimeout(value: number): Promise<void>;
    public DiscoverableTimeout(value?: number): Promise<any> {
        if (value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'DiscoverableTimeout', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'DiscoverableTimeout');
        }
    }

    //@property({ name: 'Pairable', signature: 'b', access: ACCESS_READWRITE })
    public Pairable(): Promise<boolean>;
    public Pairable(value: boolean): Promise<void>;
    public Pairable(value?: boolean): Promise<any> {
        if (value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Pairable', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Pairable');
        }
    }

    //@property({ name: 'PairableTimeout', signature: 'u', access: ACCESS_READWRITE })
    public PairableTimeout(): Promise<number>;
    public PairableTimeout(value: number): Promise<void>;
    public PairableTimeout(value?: number): Promise<any> {
        if (value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'PairableTimeout', value);
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'PairableTimeout');
        }
    }

    //@property({ name: 'Discovering', signature: 'b', access: ACCESS_READ })
    public Discovering(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Discovering');
    }

    //@property({ name: 'UUIDs', signature: 'as', access: ACCESS_READ })
    public UUIDs(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'UUIDs');
    }

    //@property({ name: 'Modalias', signature: 's', access: ACCESS_READ })
    public Modalias(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Modalias');
    }


    /***** Methods *****/

    //@method({ name: 'StartDiscovery', inSignature: '', outSignature: '' })
    public StartDiscovery(): Promise<void> {
        return this.thisDBusInterface.StartDiscovery();
    }

    //@method({ name: 'SetDiscoveryFilter', inSignature: 'a{sv}', outSignature: '' })
    public SetDiscoveryFilter(properties: { [key: string]: DBus.Variant }): Promise<void> {
        return this.thisDBusInterface.SetDiscoveryFilter(properties);
    }

    //@method({ name: 'StopDiscovery', inSignature: '', outSignature: '' })
    public StopDiscovery(): Promise<void> {
        return this.thisDBusInterface.StopDiscovery();
    }

    //@method({ name: 'RemoveDevice', inSignature: 'o', outSignature: '' })
    public RemoveDevice(device: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.RemoveDevice(device);
    }

    //@method({ name: 'GetDiscoveryFilters', inSignature: '', outSignature: 'as' })
    public GetDiscoveryFilters(): Promise<Array<string>> {
        return this.thisDBusInterface.GetDiscoveryFilters();
    }

}
/***** Signals for org.bluez.Adapter1 *****/
export declare interface OrgBluezAdapter1 {
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: { [key: string]: any }, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

/**
 * org.bluez.GattManager1
 */
export class OrgBluezGattManager1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.GattManager1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('org.bluez.GattManager1');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface: string, changed: any, invalidated: any) => {
            if (iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    public getProperties(): Promise<{ [name: string]: DBus.Variant }> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'RegisterApplication', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterApplication(application: DBus.ObjectPath, options: { [key: string]: DBus.Variant }): Promise<void> {
        return this.thisDBusInterface.RegisterApplication(application, options);
    }

    //@method({ name: 'UnregisterApplication', inSignature: 'o', outSignature: '' })
    public UnregisterApplication(application: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterApplication(application);
    }

}
/***** Signals for org.bluez.GattManager1 *****/
export declare interface OrgBluezGattManager1 {

    on(event: string, listener: Function): this;
}

/**
 * org.bluez.LEAdvertisingManager1
 */
export class OrgBluezLEAdvertisingManager1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.LEAdvertisingManager1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('org.bluez.LEAdvertisingManager1');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface: string, changed: any, invalidated: any) => {
            if (iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    public getProperties(): Promise<{ [name: string]: DBus.Variant }> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'ActiveInstances', signature: 'y', access: ACCESS_READ })
    public ActiveInstances(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ActiveInstances');
    }

    //@property({ name: 'SupportedInstances', signature: 'y', access: ACCESS_READ })
    public SupportedInstances(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'SupportedInstances');
    }

    //@property({ name: 'SupportedIncludes', signature: 'as', access: ACCESS_READ })
    public SupportedIncludes(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'SupportedIncludes');
    }


    /***** Methods *****/

    //@method({ name: 'RegisterAdvertisement', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterAdvertisement(advertisement: DBus.ObjectPath, options: { [key: string]: DBus.Variant }): Promise<void> {
        return this.thisDBusInterface.RegisterAdvertisement(advertisement, options);
    }

    //@method({ name: 'UnregisterAdvertisement', inSignature: 'o', outSignature: '' })
    public UnregisterAdvertisement(service: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterAdvertisement(service);
    }

}
/***** Signals for org.bluez.LEAdvertisingManager1 *****/
export declare interface OrgBluezLEAdvertisingManager1 {
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: { [key: string]: any }, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

/**
 * org.bluez.Media1
 */
export class OrgBluezMedia1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.Media1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('org.bluez.Media1');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface: string, changed: any, invalidated: any) => {
            if (iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    public getProperties(): Promise<{ [name: string]: DBus.Variant }> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'RegisterEndpoint', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterEndpoint(endpoint: DBus.ObjectPath, properties: { [key: string]: DBus.Variant }): Promise<void> {
        return this.thisDBusInterface.RegisterEndpoint(endpoint, properties);
    }

    //@method({ name: 'UnregisterEndpoint', inSignature: 'o', outSignature: '' })
    public UnregisterEndpoint(endpoint: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterEndpoint(endpoint);
    }

    //@method({ name: 'RegisterPlayer', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterPlayer(player: DBus.ObjectPath, properties: { [key: string]: DBus.Variant }): Promise<void> {
        return this.thisDBusInterface.RegisterPlayer(player, properties);
    }

    //@method({ name: 'UnregisterPlayer', inSignature: 'o', outSignature: '' })
    public UnregisterPlayer(player: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterPlayer(player);
    }

}
/***** Signals for org.bluez.Media1 *****/
export declare interface OrgBluezMedia1 {

    on(event: string, listener: Function): this;
}

/**
 * org.bluez.NetworkServer1
 */
export class OrgBluezNetworkServer1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.NetworkServer1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = dbusObject.getInterface('org.bluez.NetworkServer1');
        this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        this.propertiesDBusInterface.on('PropertiesChanged', (iface: string, changed: any, invalidated: any) => {
            if (iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        });
        // forward all signals
        this.on("newListener", this.thisDBusInterface.on.bind(this.thisDBusInterface));
        this.on("removeListener", this.thisDBusInterface.removeListener.bind(this.thisDBusInterface));
    }

    /***** Properties *****/

    public getProperties(): Promise<{ [name: string]: DBus.Variant }> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Register', inSignature: 'ss', outSignature: '' })
    public Register(uuid: string, bridge: string): Promise<void> {
        return this.thisDBusInterface.Register(uuid, bridge);
    }

    //@method({ name: 'Unregister', inSignature: 's', outSignature: '' })
    public Unregister(uuid: string): Promise<void> {
        return this.thisDBusInterface.Unregister(uuid);
    }

}
/***** Signals for org.bluez.NetworkServer1 *****/
export declare interface OrgBluezNetworkServer1 {

    on(event: string, listener: Function): this;
}


